// Verilated -*- C++ -*-
// DESCRIPTION: Verilator output: Primary model header
//
// This header should be included by all source files instantiating the design.
// The class here is then constructed to instantiate the design.
// See the Verilator manual for examples.

#ifndef VERILATED_VRAS_H_
#define VERILATED_VRAS_H_  // guard

#include "verilated.h"
#include "verilated_cov.h"
#include "svdpi.h"

class VRAS__Syms;
class VRAS___024root;
class VerilatedFstC;

// This class is the main interface to the Verilated model
class VRAS VL_NOT_FINAL {
  private:
    // Symbol table holding complete model state (owned by this class)
    VRAS__Syms* const vlSymsp;

  public:

    // PORTS
    // The application code writes and reads these signals to
    // propagate new values into/out from the Verilated model.

    // CELLS
    // Public to allow access to /* verilator public */ items.
    // Otherwise the application code can consider these internals.

    // Root instance pointer to allow access to model internals,
    // including inlined /* verilator public_flat_* */ items.
    VRAS___024root* const rootp;

    // CONSTRUCTORS
    /// Construct the model; called by application code
    /// If contextp is null, then the model will use the default global context
    /// If name is "", then makes a wrapper with a
    /// single model invisible with respect to DPI scope names.
    explicit VRAS(VerilatedContext* contextp, const char* name = "TOP");
    explicit VRAS(const char* name = "TOP");
    /// Destroy the model; called (often implicitly) by application code
    virtual ~VRAS();
  private:
    VL_UNCOPYABLE(VRAS);  ///< Copying not allowed

  public:
    // API METHODS
    /// Evaluate the model.  Application must call when inputs change.
    void eval() { eval_step(); eval_end_step(); }
    /// Evaluate when calling multiple units/models per time step.
    void eval_step();
    /// Evaluate at end of a timestep for tracing, when using eval_step().
    /// Application must call after all eval() and before time changes.
    void eval_end_step();
    /// Simulation complete, run final blocks.  Application must call on completion.
    void final();
    /// Trace signals in the model; called by application code
    void trace(VerilatedFstC* tfp, int levels, int options = 0);
    /// Return current simulation context for this model.
    /// Used to get to e.g. simulation time via contextp()->time()
    VerilatedContext* contextp() const;
    /// Retrieve name of this model instance (as passed to constructor).
    const char* name() const;

    /// DPI Export functions
    static void get_RAS_RASStack_BOS_value(svLogicVecVal* value);
    static void get_RAS_RASStack_TOSR_value(svLogicVecVal* value);
    static void get_RAS_RASStack_TOSW_value(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_0_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_0_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_10_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_10_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_11_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_11_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_12_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_12_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_13_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_13_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_14_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_14_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_15_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_15_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_1_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_1_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_2_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_2_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_3_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_3_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_4_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_4_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_5_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_5_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_6_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_6_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_7_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_7_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_8_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_8_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_9_ctr(svLogicVecVal* value);
    static void get_RAS_RASStack_commit_stack_9_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_io_commit_pop_valid(svLogic* value);
    static void get_RAS_RASStack_io_commit_push_valid(svLogic* value);
    static void get_RAS_RASStack_io_redirect_isCall(svLogic* value);
    static void get_RAS_RASStack_io_redirect_isRet(svLogic* value);
    static void get_RAS_RASStack_io_redirect_valid(svLogic* value);
    static void get_RAS_RASStack_io_s3_cancel(svLogic* value);
    static void get_RAS_RASStack_io_spec_pop_valid(svLogic* value);
    static void get_RAS_RASStack_io_spec_push_valid(svLogic* value);
    static void get_RAS_RASStack_nsp(svLogicVecVal* value);
    static void get_RAS_RASStack_realPush(svLogic* value);
    static void get_RAS_RASStack_sctr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_overflowed(svLogic* value);
    static void get_RAS_RASStack_spec_queue_0_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_10_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_11_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_12_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_13_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_14_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_15_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_16_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_17_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_18_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_19_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_1_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_20_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_21_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_22_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_23_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_24_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_25_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_26_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_27_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_28_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_29_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_2_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_30_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_31_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_3_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_4_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_5_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_6_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_7_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_8_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_spec_queue_9_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_ssp(svLogicVecVal* value);
    static void get_RAS_RASStack_timingTop_retAddr(svLogicVecVal* value);
    static void get_RAS_RASStack_writeBypassValid(svLogic* value);
    static void get_RAS_s2_spec_push(svLogic* value);
    static void get_RAS_s3_pop(svLogic* value);
    static void get_RAS_s3_push(svLogic* value);
    static void get_RAS_s3_pushed_in_s2(svLogic* value);
    static void get_clock(svLogic* value);
    static void get_io_ctrl_ras_enable(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_always_taken_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_always_taken_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_lower(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_offset(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_tarStat(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_valid(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_carry(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_isCall(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_isJalr(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_isRet(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_last_may_be_rvi_call(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_pftAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_lower(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_offset(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_tarStat(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_valid(svLogic* value);
    static void get_io_in_bits_resp_in_0_last_stage_ftb_entry_valid(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_offsets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_offsets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_0_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_offsets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_offsets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_1_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_is_call(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_is_jalr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_is_ret(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_last_may_be_rvi_call(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_offsets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_offsets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_2_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_fallThroughErr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_offsets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_offsets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s2_full_pred_3_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_fallThroughErr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_multiHit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_0_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_fallThroughErr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_multiHit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_1_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_fallThroughErr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_is_call(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_is_jalr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_is_ret(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_multiHit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_2_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_br_taken_mask_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_br_taken_mask_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_fallThroughAddr(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_fallThroughErr(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_hit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_is_br_sharing(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_jalr_target(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_multiHit(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_offsets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_offsets_1(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_slot_valids_0(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_slot_valids_1(svLogic* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_targets_0(svLogicVecVal* value);
    static void get_io_in_bits_resp_in_0_s3_full_pred_3_targets_1(svLogicVecVal* value);
    static void get_io_in_bits_s0_pc_0(svLogicVecVal* value);
    static void get_io_in_bits_s0_pc_1(svLogicVecVal* value);
    static void get_io_in_bits_s0_pc_2(svLogicVecVal* value);
    static void get_io_in_bits_s0_pc_3(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_always_taken_0(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_always_taken_1(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_brSlots_0_lower(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_brSlots_0_offset(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_brSlots_0_sharing(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_brSlots_0_tarStat(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_brSlots_0_valid(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_carry(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_isCall(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_isJalr(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_isRet(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_last_may_be_rvi_call(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_pftAddr(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_tailSlot_lower(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_tailSlot_offset(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_tailSlot_sharing(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_tailSlot_tarStat(svLogicVecVal* value);
    static void get_io_out_last_stage_ftb_entry_tailSlot_valid(svLogic* value);
    static void get_io_out_last_stage_ftb_entry_valid(svLogic* value);
    static void get_io_out_last_stage_meta(svLogicVecVal* value);
    static void get_io_out_last_stage_spec_info_NOS_flag(svLogic* value);
    static void get_io_out_last_stage_spec_info_NOS_value(svLogicVecVal* value);
    static void get_io_out_last_stage_spec_info_TOSR_flag(svLogic* value);
    static void get_io_out_last_stage_spec_info_TOSR_value(svLogicVecVal* value);
    static void get_io_out_last_stage_spec_info_TOSW_flag(svLogic* value);
    static void get_io_out_last_stage_spec_info_TOSW_value(svLogicVecVal* value);
    static void get_io_out_last_stage_spec_info_sctr(svLogicVecVal* value);
    static void get_io_out_last_stage_spec_info_ssp(svLogicVecVal* value);
    static void get_io_out_last_stage_spec_info_topAddr(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_0_br_taken_mask_0(svLogic* value);
    static void get_io_out_s2_full_pred_0_br_taken_mask_1(svLogic* value);
    static void get_io_out_s2_full_pred_0_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_0_hit(svLogic* value);
    static void get_io_out_s2_full_pred_0_is_br_sharing(svLogic* value);
    static void get_io_out_s2_full_pred_0_offsets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_0_offsets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_0_slot_valids_0(svLogic* value);
    static void get_io_out_s2_full_pred_0_slot_valids_1(svLogic* value);
    static void get_io_out_s2_full_pred_0_targets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_0_targets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_1_br_taken_mask_0(svLogic* value);
    static void get_io_out_s2_full_pred_1_br_taken_mask_1(svLogic* value);
    static void get_io_out_s2_full_pred_1_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_1_hit(svLogic* value);
    static void get_io_out_s2_full_pred_1_is_br_sharing(svLogic* value);
    static void get_io_out_s2_full_pred_1_offsets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_1_offsets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_1_slot_valids_0(svLogic* value);
    static void get_io_out_s2_full_pred_1_slot_valids_1(svLogic* value);
    static void get_io_out_s2_full_pred_1_targets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_1_targets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_2_br_taken_mask_0(svLogic* value);
    static void get_io_out_s2_full_pred_2_br_taken_mask_1(svLogic* value);
    static void get_io_out_s2_full_pred_2_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_2_hit(svLogic* value);
    static void get_io_out_s2_full_pred_2_is_br_sharing(svLogic* value);
    static void get_io_out_s2_full_pred_2_offsets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_2_offsets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_2_slot_valids_0(svLogic* value);
    static void get_io_out_s2_full_pred_2_slot_valids_1(svLogic* value);
    static void get_io_out_s2_full_pred_2_targets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_2_targets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_3_br_taken_mask_0(svLogic* value);
    static void get_io_out_s2_full_pred_3_br_taken_mask_1(svLogic* value);
    static void get_io_out_s2_full_pred_3_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_3_fallThroughErr(svLogic* value);
    static void get_io_out_s2_full_pred_3_hit(svLogic* value);
    static void get_io_out_s2_full_pred_3_is_br_sharing(svLogic* value);
    static void get_io_out_s2_full_pred_3_offsets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_3_offsets_1(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_3_slot_valids_0(svLogic* value);
    static void get_io_out_s2_full_pred_3_slot_valids_1(svLogic* value);
    static void get_io_out_s2_full_pred_3_targets_0(svLogicVecVal* value);
    static void get_io_out_s2_full_pred_3_targets_1(svLogicVecVal* value);
    static void get_io_out_s2_pc_0(svLogicVecVal* value);
    static void get_io_out_s2_pc_1(svLogicVecVal* value);
    static void get_io_out_s2_pc_2(svLogicVecVal* value);
    static void get_io_out_s2_pc_3(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_0_br_taken_mask_0(svLogic* value);
    static void get_io_out_s3_full_pred_0_br_taken_mask_1(svLogic* value);
    static void get_io_out_s3_full_pred_0_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_0_fallThroughErr(svLogic* value);
    static void get_io_out_s3_full_pred_0_hit(svLogic* value);
    static void get_io_out_s3_full_pred_0_is_br_sharing(svLogic* value);
    static void get_io_out_s3_full_pred_0_multiHit(svLogic* value);
    static void get_io_out_s3_full_pred_0_slot_valids_0(svLogic* value);
    static void get_io_out_s3_full_pred_0_slot_valids_1(svLogic* value);
    static void get_io_out_s3_full_pred_0_targets_0(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_0_targets_1(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_1_br_taken_mask_0(svLogic* value);
    static void get_io_out_s3_full_pred_1_br_taken_mask_1(svLogic* value);
    static void get_io_out_s3_full_pred_1_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_1_fallThroughErr(svLogic* value);
    static void get_io_out_s3_full_pred_1_hit(svLogic* value);
    static void get_io_out_s3_full_pred_1_is_br_sharing(svLogic* value);
    static void get_io_out_s3_full_pred_1_multiHit(svLogic* value);
    static void get_io_out_s3_full_pred_1_slot_valids_0(svLogic* value);
    static void get_io_out_s3_full_pred_1_slot_valids_1(svLogic* value);
    static void get_io_out_s3_full_pred_1_targets_0(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_1_targets_1(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_2_br_taken_mask_0(svLogic* value);
    static void get_io_out_s3_full_pred_2_br_taken_mask_1(svLogic* value);
    static void get_io_out_s3_full_pred_2_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_2_fallThroughErr(svLogic* value);
    static void get_io_out_s3_full_pred_2_hit(svLogic* value);
    static void get_io_out_s3_full_pred_2_is_br_sharing(svLogic* value);
    static void get_io_out_s3_full_pred_2_multiHit(svLogic* value);
    static void get_io_out_s3_full_pred_2_slot_valids_0(svLogic* value);
    static void get_io_out_s3_full_pred_2_slot_valids_1(svLogic* value);
    static void get_io_out_s3_full_pred_2_targets_0(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_2_targets_1(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_3_br_taken_mask_0(svLogic* value);
    static void get_io_out_s3_full_pred_3_br_taken_mask_1(svLogic* value);
    static void get_io_out_s3_full_pred_3_fallThroughAddr(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_3_fallThroughErr(svLogic* value);
    static void get_io_out_s3_full_pred_3_hit(svLogic* value);
    static void get_io_out_s3_full_pred_3_is_br_sharing(svLogic* value);
    static void get_io_out_s3_full_pred_3_multiHit(svLogic* value);
    static void get_io_out_s3_full_pred_3_offsets_0(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_3_offsets_1(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_3_slot_valids_0(svLogic* value);
    static void get_io_out_s3_full_pred_3_slot_valids_1(svLogic* value);
    static void get_io_out_s3_full_pred_3_targets_0(svLogicVecVal* value);
    static void get_io_out_s3_full_pred_3_targets_1(svLogicVecVal* value);
    static void get_io_out_s3_pc_0(svLogicVecVal* value);
    static void get_io_out_s3_pc_1(svLogicVecVal* value);
    static void get_io_out_s3_pc_2(svLogicVecVal* value);
    static void get_io_out_s3_pc_3(svLogicVecVal* value);
    static void get_io_redirect_bits_cfiUpdate_NOS_flag(svLogic* value);
    static void get_io_redirect_bits_cfiUpdate_NOS_value(svLogicVecVal* value);
    static void get_io_redirect_bits_cfiUpdate_TOSR_flag(svLogic* value);
    static void get_io_redirect_bits_cfiUpdate_TOSR_value(svLogicVecVal* value);
    static void get_io_redirect_bits_cfiUpdate_TOSW_flag(svLogic* value);
    static void get_io_redirect_bits_cfiUpdate_TOSW_value(svLogicVecVal* value);
    static void get_io_redirect_bits_cfiUpdate_pc(svLogicVecVal* value);
    static void get_io_redirect_bits_cfiUpdate_pd_isCall(svLogic* value);
    static void get_io_redirect_bits_cfiUpdate_pd_isRVC(svLogic* value);
    static void get_io_redirect_bits_cfiUpdate_pd_isRet(svLogic* value);
    static void get_io_redirect_bits_cfiUpdate_sctr(svLogicVecVal* value);
    static void get_io_redirect_bits_cfiUpdate_ssp(svLogicVecVal* value);
    static void get_io_redirect_bits_level(svLogic* value);
    static void get_io_redirect_valid(svLogic* value);
    static void get_io_reset_vector(svLogicVecVal* value);
    static void get_io_s0_fire_0(svLogic* value);
    static void get_io_s0_fire_1(svLogic* value);
    static void get_io_s0_fire_2(svLogic* value);
    static void get_io_s0_fire_3(svLogic* value);
    static void get_io_s1_fire_0(svLogic* value);
    static void get_io_s1_fire_1(svLogic* value);
    static void get_io_s1_fire_2(svLogic* value);
    static void get_io_s1_fire_3(svLogic* value);
    static void get_io_s2_fire_0(svLogic* value);
    static void get_io_s2_fire_1(svLogic* value);
    static void get_io_s2_fire_2(svLogic* value);
    static void get_io_s2_fire_3(svLogic* value);
    static void get_io_s3_fire_2(svLogic* value);
    static void get_io_s3_redirect_2(svLogic* value);
    static void get_io_update_bits_cfi_idx_bits(svLogicVecVal* value);
    static void get_io_update_bits_cfi_idx_valid(svLogic* value);
    static void get_io_update_bits_ftb_entry_isCall(svLogic* value);
    static void get_io_update_bits_ftb_entry_isRet(svLogic* value);
    static void get_io_update_bits_ftb_entry_tailSlot_offset(svLogicVecVal* value);
    static void get_io_update_bits_ftb_entry_tailSlot_valid(svLogic* value);
    static void get_io_update_bits_jmp_taken(svLogic* value);
    static void get_io_update_bits_meta(svLogicVecVal* value);
    static void get_io_update_valid(svLogic* value);
    static void get_reset(svLogic* value);
    static void set_clock(svLogic value);
    static void set_io_ctrl_ras_enable(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_always_taken_0(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_always_taken_1(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_lower(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_offset(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_tarStat(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_brSlots_0_valid(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_carry(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_isCall(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_isJalr(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_isRet(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_last_may_be_rvi_call(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_pftAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_lower(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_offset(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_tarStat(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_tailSlot_valid(svLogic value);
    static void set_io_in_bits_resp_in_0_last_stage_ftb_entry_valid(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_offsets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_offsets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_0_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_offsets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_offsets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_1_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_is_call(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_is_jalr(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_is_ret(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_last_may_be_rvi_call(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_offsets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_offsets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_2_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_fallThroughErr(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_offsets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_offsets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s2_full_pred_3_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_fallThroughErr(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_multiHit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_0_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_fallThroughErr(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_multiHit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_1_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_fallThroughErr(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_is_call(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_is_jalr(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_is_ret(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_multiHit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_2_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_br_taken_mask_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_br_taken_mask_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_fallThroughErr(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_hit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_is_br_sharing(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_jalr_target(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_multiHit(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_offsets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_offsets_1(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_slot_valids_0(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_slot_valids_1(svLogic value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_targets_0(const svLogicVecVal* value);
    static void set_io_in_bits_resp_in_0_s3_full_pred_3_targets_1(const svLogicVecVal* value);
    static void set_io_in_bits_s0_pc_0(const svLogicVecVal* value);
    static void set_io_in_bits_s0_pc_1(const svLogicVecVal* value);
    static void set_io_in_bits_s0_pc_2(const svLogicVecVal* value);
    static void set_io_in_bits_s0_pc_3(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_always_taken_0(svLogic value);
    static void set_io_out_last_stage_ftb_entry_always_taken_1(svLogic value);
    static void set_io_out_last_stage_ftb_entry_brSlots_0_lower(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_brSlots_0_offset(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_brSlots_0_sharing(svLogic value);
    static void set_io_out_last_stage_ftb_entry_brSlots_0_tarStat(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_brSlots_0_valid(svLogic value);
    static void set_io_out_last_stage_ftb_entry_carry(svLogic value);
    static void set_io_out_last_stage_ftb_entry_isCall(svLogic value);
    static void set_io_out_last_stage_ftb_entry_isJalr(svLogic value);
    static void set_io_out_last_stage_ftb_entry_isRet(svLogic value);
    static void set_io_out_last_stage_ftb_entry_last_may_be_rvi_call(svLogic value);
    static void set_io_out_last_stage_ftb_entry_pftAddr(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_tailSlot_lower(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_tailSlot_offset(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_tailSlot_sharing(svLogic value);
    static void set_io_out_last_stage_ftb_entry_tailSlot_tarStat(const svLogicVecVal* value);
    static void set_io_out_last_stage_ftb_entry_tailSlot_valid(svLogic value);
    static void set_io_out_last_stage_ftb_entry_valid(svLogic value);
    static void set_io_out_last_stage_meta(const svLogicVecVal* value);
    static void set_io_out_last_stage_spec_info_NOS_flag(svLogic value);
    static void set_io_out_last_stage_spec_info_NOS_value(const svLogicVecVal* value);
    static void set_io_out_last_stage_spec_info_TOSR_flag(svLogic value);
    static void set_io_out_last_stage_spec_info_TOSR_value(const svLogicVecVal* value);
    static void set_io_out_last_stage_spec_info_TOSW_flag(svLogic value);
    static void set_io_out_last_stage_spec_info_TOSW_value(const svLogicVecVal* value);
    static void set_io_out_last_stage_spec_info_sctr(const svLogicVecVal* value);
    static void set_io_out_last_stage_spec_info_ssp(const svLogicVecVal* value);
    static void set_io_out_last_stage_spec_info_topAddr(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_0_br_taken_mask_0(svLogic value);
    static void set_io_out_s2_full_pred_0_br_taken_mask_1(svLogic value);
    static void set_io_out_s2_full_pred_0_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_0_hit(svLogic value);
    static void set_io_out_s2_full_pred_0_is_br_sharing(svLogic value);
    static void set_io_out_s2_full_pred_0_offsets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_0_offsets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_0_slot_valids_0(svLogic value);
    static void set_io_out_s2_full_pred_0_slot_valids_1(svLogic value);
    static void set_io_out_s2_full_pred_0_targets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_0_targets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_1_br_taken_mask_0(svLogic value);
    static void set_io_out_s2_full_pred_1_br_taken_mask_1(svLogic value);
    static void set_io_out_s2_full_pred_1_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_1_hit(svLogic value);
    static void set_io_out_s2_full_pred_1_is_br_sharing(svLogic value);
    static void set_io_out_s2_full_pred_1_offsets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_1_offsets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_1_slot_valids_0(svLogic value);
    static void set_io_out_s2_full_pred_1_slot_valids_1(svLogic value);
    static void set_io_out_s2_full_pred_1_targets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_1_targets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_2_br_taken_mask_0(svLogic value);
    static void set_io_out_s2_full_pred_2_br_taken_mask_1(svLogic value);
    static void set_io_out_s2_full_pred_2_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_2_hit(svLogic value);
    static void set_io_out_s2_full_pred_2_is_br_sharing(svLogic value);
    static void set_io_out_s2_full_pred_2_offsets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_2_offsets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_2_slot_valids_0(svLogic value);
    static void set_io_out_s2_full_pred_2_slot_valids_1(svLogic value);
    static void set_io_out_s2_full_pred_2_targets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_2_targets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_3_br_taken_mask_0(svLogic value);
    static void set_io_out_s2_full_pred_3_br_taken_mask_1(svLogic value);
    static void set_io_out_s2_full_pred_3_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_3_fallThroughErr(svLogic value);
    static void set_io_out_s2_full_pred_3_hit(svLogic value);
    static void set_io_out_s2_full_pred_3_is_br_sharing(svLogic value);
    static void set_io_out_s2_full_pred_3_offsets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_3_offsets_1(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_3_slot_valids_0(svLogic value);
    static void set_io_out_s2_full_pred_3_slot_valids_1(svLogic value);
    static void set_io_out_s2_full_pred_3_targets_0(const svLogicVecVal* value);
    static void set_io_out_s2_full_pred_3_targets_1(const svLogicVecVal* value);
    static void set_io_out_s2_pc_0(const svLogicVecVal* value);
    static void set_io_out_s2_pc_1(const svLogicVecVal* value);
    static void set_io_out_s2_pc_2(const svLogicVecVal* value);
    static void set_io_out_s2_pc_3(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_0_br_taken_mask_0(svLogic value);
    static void set_io_out_s3_full_pred_0_br_taken_mask_1(svLogic value);
    static void set_io_out_s3_full_pred_0_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_0_fallThroughErr(svLogic value);
    static void set_io_out_s3_full_pred_0_hit(svLogic value);
    static void set_io_out_s3_full_pred_0_is_br_sharing(svLogic value);
    static void set_io_out_s3_full_pred_0_multiHit(svLogic value);
    static void set_io_out_s3_full_pred_0_slot_valids_0(svLogic value);
    static void set_io_out_s3_full_pred_0_slot_valids_1(svLogic value);
    static void set_io_out_s3_full_pred_0_targets_0(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_0_targets_1(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_1_br_taken_mask_0(svLogic value);
    static void set_io_out_s3_full_pred_1_br_taken_mask_1(svLogic value);
    static void set_io_out_s3_full_pred_1_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_1_fallThroughErr(svLogic value);
    static void set_io_out_s3_full_pred_1_hit(svLogic value);
    static void set_io_out_s3_full_pred_1_is_br_sharing(svLogic value);
    static void set_io_out_s3_full_pred_1_multiHit(svLogic value);
    static void set_io_out_s3_full_pred_1_slot_valids_0(svLogic value);
    static void set_io_out_s3_full_pred_1_slot_valids_1(svLogic value);
    static void set_io_out_s3_full_pred_1_targets_0(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_1_targets_1(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_2_br_taken_mask_0(svLogic value);
    static void set_io_out_s3_full_pred_2_br_taken_mask_1(svLogic value);
    static void set_io_out_s3_full_pred_2_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_2_fallThroughErr(svLogic value);
    static void set_io_out_s3_full_pred_2_hit(svLogic value);
    static void set_io_out_s3_full_pred_2_is_br_sharing(svLogic value);
    static void set_io_out_s3_full_pred_2_multiHit(svLogic value);
    static void set_io_out_s3_full_pred_2_slot_valids_0(svLogic value);
    static void set_io_out_s3_full_pred_2_slot_valids_1(svLogic value);
    static void set_io_out_s3_full_pred_2_targets_0(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_2_targets_1(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_3_br_taken_mask_0(svLogic value);
    static void set_io_out_s3_full_pred_3_br_taken_mask_1(svLogic value);
    static void set_io_out_s3_full_pred_3_fallThroughAddr(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_3_fallThroughErr(svLogic value);
    static void set_io_out_s3_full_pred_3_hit(svLogic value);
    static void set_io_out_s3_full_pred_3_is_br_sharing(svLogic value);
    static void set_io_out_s3_full_pred_3_multiHit(svLogic value);
    static void set_io_out_s3_full_pred_3_offsets_0(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_3_offsets_1(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_3_slot_valids_0(svLogic value);
    static void set_io_out_s3_full_pred_3_slot_valids_1(svLogic value);
    static void set_io_out_s3_full_pred_3_targets_0(const svLogicVecVal* value);
    static void set_io_out_s3_full_pred_3_targets_1(const svLogicVecVal* value);
    static void set_io_out_s3_pc_0(const svLogicVecVal* value);
    static void set_io_out_s3_pc_1(const svLogicVecVal* value);
    static void set_io_out_s3_pc_2(const svLogicVecVal* value);
    static void set_io_out_s3_pc_3(const svLogicVecVal* value);
    static void set_io_redirect_bits_cfiUpdate_NOS_flag(svLogic value);
    static void set_io_redirect_bits_cfiUpdate_NOS_value(const svLogicVecVal* value);
    static void set_io_redirect_bits_cfiUpdate_TOSR_flag(svLogic value);
    static void set_io_redirect_bits_cfiUpdate_TOSR_value(const svLogicVecVal* value);
    static void set_io_redirect_bits_cfiUpdate_TOSW_flag(svLogic value);
    static void set_io_redirect_bits_cfiUpdate_TOSW_value(const svLogicVecVal* value);
    static void set_io_redirect_bits_cfiUpdate_pc(const svLogicVecVal* value);
    static void set_io_redirect_bits_cfiUpdate_pd_isCall(svLogic value);
    static void set_io_redirect_bits_cfiUpdate_pd_isRVC(svLogic value);
    static void set_io_redirect_bits_cfiUpdate_pd_isRet(svLogic value);
    static void set_io_redirect_bits_cfiUpdate_sctr(const svLogicVecVal* value);
    static void set_io_redirect_bits_cfiUpdate_ssp(const svLogicVecVal* value);
    static void set_io_redirect_bits_level(svLogic value);
    static void set_io_redirect_valid(svLogic value);
    static void set_io_reset_vector(const svLogicVecVal* value);
    static void set_io_s0_fire_0(svLogic value);
    static void set_io_s0_fire_1(svLogic value);
    static void set_io_s0_fire_2(svLogic value);
    static void set_io_s0_fire_3(svLogic value);
    static void set_io_s1_fire_0(svLogic value);
    static void set_io_s1_fire_1(svLogic value);
    static void set_io_s1_fire_2(svLogic value);
    static void set_io_s1_fire_3(svLogic value);
    static void set_io_s2_fire_0(svLogic value);
    static void set_io_s2_fire_1(svLogic value);
    static void set_io_s2_fire_2(svLogic value);
    static void set_io_s2_fire_3(svLogic value);
    static void set_io_s3_fire_2(svLogic value);
    static void set_io_s3_redirect_2(svLogic value);
    static void set_io_update_bits_cfi_idx_bits(const svLogicVecVal* value);
    static void set_io_update_bits_cfi_idx_valid(svLogic value);
    static void set_io_update_bits_ftb_entry_isCall(svLogic value);
    static void set_io_update_bits_ftb_entry_isRet(svLogic value);
    static void set_io_update_bits_ftb_entry_tailSlot_offset(const svLogicVecVal* value);
    static void set_io_update_bits_ftb_entry_tailSlot_valid(svLogic value);
    static void set_io_update_bits_jmp_taken(svLogic value);
    static void set_io_update_bits_meta(const svLogicVecVal* value);
    static void set_io_update_valid(svLogic value);
    static void set_reset(svLogic value);
} VL_ATTR_ALIGNED(VL_CACHE_LINE_BYTES);

#endif  // guard
